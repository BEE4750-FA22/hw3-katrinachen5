---
title: "BEE 4750/5750 Homework 3"
author: "Katrina Chen (kc778)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: true
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

<!--- this block is hidden, but stores the generator and demand data; you can use a dataframe to combine these or refactor as you'd like -->
```julia; echo = false; results = "hidden"
# generator data
investment_cost = [457000, 268000, 85000, 62580, 92000, 92000]
op_cost = [0, 22, 35, 45, 0, 0]
co2_emissions = [0, 1, 0.43, 0.55, 0, 0]
thermal_cf = [0.95, 1, 1, 1]

hours = 1:24
demand = [1517, 1486, 1544, 1733, 2058, 2470, 2628, 2696, 2653, 2591, 2626, 2714, 2803, 2842, 2891,  2821, 3017, 3074, 2957,  2487, 2249, 1933, 1684, 1563]
wind_cf = [0.58, 0.57, 0.55, 0.28, 0.14, 0.21, 0.03, 0.04, 0.01, 0.04, 0.04, 0.01, 0.04, 0.04, 0.01, 0.01, 0.01, 0.13, 0.30, 0.45, 0.44, 0.57, 0.55, 0.58]
solar_cf = [0, 0, 0, 0, 0, 0, 0.20, 0.57, 0.80, 0.93, 0.99, 0.99, 0.85, 0.99, 0.95, 0.81, 0.55, 0.12, 0, 0, 0, 0, 0, 0]
```

# Problem 1

## Problem 1.1
There are multiple decision variables to consider.
One decision variable is the installed capacity in MW of generator type g. Let this be $x_g$.
Another decision variable is the production in MW from generator type g in period t. Let this be $y_{g,t}$.
A third decision variable is considering the non-served energy in MWh in each period t. Let this be $z_t$.

The problem consisted of 6 different generator types: geothermal, coal, CCGT, CT, wind, and solar. 
A period is 24 hours, counting by hours (ie $t=1$ means 1 hour). 

```julia
using JuMP
using HiGHS

energy_model = Model(HiGHS.Optimizer)

generators = ["geothermal","coal","CCGT","CT","wind","solar"];
period = 1:24;

G = 1:length(generators);
T = 1:length(period);

@variable(energy_model,x[G]>=0);
@variable(energy_model,y[G,T]>=0);
@variable(energy_model,z[T]>=0);
```

## Problem 1.2
The objective of this problem is to minimize the total costs for capacity expansion.
The total cost includes investment cost, operating cost, and the cost of non-served energy. 

Let $C_g^{INV}$ be the investment cost for a generator g, $C_g^{OP}$ be the operating cost for a generator g, and $C_t^{NS}$ be the the non-served energy cost for time period t.
Also, let $L_t$ be the length of the time period t.
With these variables, we can model the total cost as:

```math
minZ = \sum_g C_g^{INV} x_g + \sum_g \sum_t L_t C_g^{OP} y_{g,t} + \sum_t C_t^{NS} L_t z_t
```
```julia
@objective(energy_model, Min, [457000, 268000, 85000, 62580, 92000, 92000]' * x + sum(365*22*y[2,:] + 365*35*y[3,:] + 365*45*y[4,:]) + (365*1000*sum(z)))
```

## Problem 1.3
One constraint is that generators cannot produce more than their capacity factor. 
For example, for the wind generator at hour 1 of a day, 
```math
y_{wind,1} ≤ 0.58 * x_{wind}
```

Another constraint is that they need to serve enough energy to meet the demand. 
The demand at hour t will be,
```math
demand_t = \sum_{g} y_{g,t} + z_t 
```

Another constraint is that the variables cannot be negative.
```math
x_g ≥ 0 \\
y_{g,t} ≥ 0 \\
z_t ≥ 0 \\
```

```julia
avail = zeros(length(G),length(T));

avail[1, :] .= thermal_cf[1];
avail[2, :] .= thermal_cf[2];
avail[3, :] .= thermal_cf[3];
avail[4, :] .= thermal_cf[4];
avail[5, :] = wind_cf;
avail[6, :] = solar_cf;

@constraint(energy_model, availability[g in G, t in T], y[g,t] <= avail[g,t]*x[g])

@constraint(energy_model, load[t in T], sum(y[:, t]) + sum(z[t]) == demand[t])
```

## Problem 1.4
```julia
optimize!(energy_model)
```

## Problem 1.5
```julia
build = value.(x);
cost = objective_value(energy_model);
nonserve = sum(value.(z));
```

The ultility needs to build generators to provide for the following amounts in MW. 
The six values correspond to geothermal, coal , CCGT, CT, wind, and solar generators respectively.
```julia
print(build)
```

The total cost in dollars will be
```julia
print(cost)
```

The nonserved energy in MW will be
```julia
print(nonserve)
```

## Problem 1.6
```julia
using Plots

g = value.(y).data;

L = plot(g', label=permutedims(generators), xlabel = "Time of day (hr)", ylabel ="Generated Electricity (MW)", title = "Raw Amounts of Generated Electricity")

A = areaplot(g', label=permutedims(generators), xlabel = "Time of day (hr)", ylabel ="Generated Electricity (MW)", title = "Aggregated Amounts of Generated Electricity");

D = plot!(demand, color=:red, label="demand", linewidth = 5)
```

A key takeawy is that during the day, almost all of the generated electricity is from solar power, likely because that is when there is most sunlight.
Wind energy provides the most when there is no solar power. This could be because it is usually more windy at night when there is no sunlight. 
CCGT is a large source of generated electricity during off hours to help reach the demand where the wind power does not. 
Similarly, the CT also helps out when the wind energy is lacking.
There is no geothermal nor coal providing any electricity.  


# Problem 2

## Problem 2.1
For problem 2, we need to now consider the $CO_2$ emissions from each of the different generators. 
We also need to add another constraint to ensure that the $CO_2$ emissions do not exceed $1.5  Mt CO_2 /yr$

```julia
energy_model_cd = Model(HiGHS.Optimizer)

@variable(energy_model_cd,x_cd[G]>=0);
@variable(energy_model_cd,y_cd[G,T]>=0);
@variable(energy_model_cd,z_cd[T]>=0);

@objective(energy_model_cd, Min, [457000, 268000, 85000, 62580, 92000, 92000]' * x_cd + sum(365*22*y_cd[2,:] + 365*35*y_cd[3,:] + 365*45*y_cd[4,:]) + (365*1000*sum(z_cd)));

@constraint(energy_model_cd,availability[g in G, t in T], y_cd[g,t] <= avail[g,t]*x_cd[g]);
@constraint(energy_model_cd,load[t in T], sum(y_cd[:, t]) + sum(z_cd[t]) == demand[t]);


cd = sum(co2_emissions'*y_cd)

@constraint(energy_model_cd, co2, cd <= (1.5*10^6)/365)
```

## Problem 2.2
```julia
optimize!(energy_model_cd)
```

## Problem 2.3
```julia
build_cd = value.(x_cd);
```

When considering the $CO_2$ emissions and limit, the ultility needs to build generators to provide for the following amounts in MW. 
The six values correspond to geothermal, coal , CCGT, CT, wind, and solar generators respectively.
```julia
print(build_cd)
```

One of the largest differences is that there is now a good amount of electricity being provided by a geothermal generator. 
There is still no coal providing electricity, like in problem 1. 
For CCGT, CT, wind, and solar generators, all the amounts of electricity prrovided decreased slighty from problem 1.
Similar to problem 1, the most amount of electricity is still from the solar generator. 

## Problem 2.4
```julia
g_cd = value.(y_cd).data;

L_cd = plot(g_cd', label=permutedims(generators), xlabel = "Time of day (hr)", ylabel ="Generated Electricity (MW)", title = "Raw Amounts of Generated Electricity")

A_cd = areaplot(g_cd', label=permutedims(generators), xlabel = "Time of day (hr)", ylabel ="Generated Electricity (MW)", title = "Aggregated Amounts of Generated Electricity");

D_cd = plot!(demand, color=:red, label="demand", linewidth = 5)
```

Similar to problem 1, we see that during the day, the majrority of the electrticity is due to the solar generator, likely due to the sunlight in the day.
We also see a similar pattern where the wind enery provides more when it is night and more windy.
There are also peaks of CCGT electricity to help reach the demand when there is not a lot of wind energy. 
The biggest difference is that there is now a pretty consistent and large amount of geothermal energy being provided the entire 24 hours, which was not there in problem 1.


## Problem 2.5
```julia
energy_model_cd2 = Model(HiGHS.Optimizer)

@variable(energy_model_cd2,x_cd2[G]>=0);
@variable(energy_model_cd2,y_cd2[G,T]>=0);
@variable(energy_model_cd2,z_cd2[T]>=0);

@objective(energy_model_cd2, Min, [457000, 268000, 85000, 62580, 92000, 92000]' * x_cd2 + sum(365*22*y_cd2[2,:] + 365*35*y_cd2[3,:] + 365*45*y_cd2[4,:]) + (365*1000*sum(z_cd2)));

@constraint(energy_model_cd2, availability[g in G, t in T], y_cd2[g,t] <= avail[g,t]*x_cd2[g]);
@constraint(energy_model_cd2, load[t in T], sum(y_cd2[:, t]) + sum(z_cd2[t]) == demand[t]);


cd2 = sum(co2_emissions'*y_cd2);

@constraint(energy_model_cd2, co2, cd2 <= (1.5*10^6 + 1000)/365)

optimize!(energy_model_cd2)

build_cd2 = value.(x_cd2);
```

When considering the $CO_2$ emissions with extnding the limit, the ultility needs to build generators to provide for the following amounts in MW. 
The six values correspond to geothermal, coal , CCGT, CT, wind, and solar generators respectively.

```julia
print(build_cd2)
```


# References
Lecture notes 9, 11, and 12 from https://viveks.me/environmental-systems-analysis/schedule/

https://tex.stackexchange.com/questions/46189/how-do-i-add-a-line-break-in-display-math-mode

https://docs.juliaplots.org/latest/attributes/

https://jump.dev/JuMP.jl/stable/manual/variables/

https://jump.dev/JuMP.jl/stable/manual/constraints/


