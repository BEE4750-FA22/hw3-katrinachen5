---
title: "BEE 4750/5750 Homework 3"
author: "Katrina Chen (kc778)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: true
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

<!--- this block is hidden, but stores the generator and demand data; you can use a dataframe to combine these or refactor as you'd like -->
```julia; echo = false; results = "hidden"
# generator data
investment_cost = [457000, 268000, 85000, 62580, 92000, 92000]
op_cost = [0, 22, 35, 45, 0, 0]
co2_emissions = [0, 1, 0.43, 0.55, 0, 0]
thermal_cf = [0.95, 1, 1, 1]

hours = 1:24
demand = [1517, 1486, 1544, 1733, 2058, 2470, 2628, 2696, 2653, 2591, 2626, 2714, 2803, 2842, 2891,  2821, 3017, 3074, 2957,  2487, 2249, 1933, 1684, 1563]
wind_cf = [0.58, 0.57, 0.55, 0.28, 0.14, 0.21, 0.03, 0.04, 0.01, 0.04, 0.04, 0.01, 0.04, 0.04, 0.01, 0.01, 0.01, 0.13, 0.30, 0.45, 0.44, 0.57, 0.55, 0.58]
solar_cf = [0, 0, 0, 0, 0, 0, 0.20, 0.57, 0.80, 0.93, 0.99, 0.99, 0.85, 0.99, 0.95, 0.81, 0.55, 0.12, 0, 0, 0, 0, 0, 0]
```

# Problem 1

## Problem 1.1
There are multiple decision variables to consider.
One decision variable is the installed capacity in MW of generator type g. Let this be $x_g$.
Another decision variable is the production in MW from generator type g in period t. Let this be $y_{g,t}$.
A third decision variable is considering the non-served energy in MWh in each period t. Let this be $z_t$.

The problem consisted of 6 different generator types: geothermal, coal, CCGT, CT, wind, and solar. 
A period is 24 hours, counting by hours (ie $t=1$ means 1 hour). 

```julia
using JuMP
using HiGHS

energy_model = Model(HiGHS.Optimizer)

generators = ["geothermal","coal","CCGT","CT","wind","solar"];
period = 1:24;

G = 1:length(generators);
T = 1:length(period);

@variable(energy_model,x[G]>=0);
@variable(energy_model,y[G,T]>=0);
@variable(energy_model,z[T]>=0);
```

## Problem 1.2
The objective of this problem is to minimize the total costs for capacity expansion.
The total cost includes investment cost, operating cost, and the cost of non-served energy. 

Let $C_g^{INV}$ be the investment cost for a generator g, $C_g^{OP}$ be the operating cost for a generator g, and $C_t^{NS}$ be the the non-served energy cost for time period t.
Also, let $L_t$ be the length of the time period t.
With these variables, we can model the cost as:

```math
minZ = \sum_g C_g^{INV} x_g + \sum_g \sum_t L_t C_g^{OP} y_{g,t} + \sum_t C_t^{NS} L_t z_t
```
```julia
@objective(energy_model, Min, [457000, 268000, 85000, 62580, 92000, 92000]' * x + sum(365*22*y[2,:] + 365*35*y[3,:] + 365*45*y[4,:]) + (365*1000*sum(z)))
```

## Problem 1.3
One constraint is that generators cannot produce more than their capacity factor. 
For example, for the wind generator at 1 hour,
```math
y_{wind,1} ≤ 0.58 * x_{wind}
```

Another constraint is that they need to serve enough energy to meet the demand. 
```math
demand = \sum_{g} y_{g,t} + z_t 
```

Another constraint is that the variables cannot be negative.
```math
x_g ≥ 0 \\
y_{g,t} ≥ 0 \\
z_t ≥ 0 \\
```

```julia

avail = zeros(length(G),length(T));

avail[1, :] .= thermal_cf[1];
avail[2, :] .= thermal_cf[2];
avail[3, :] .= thermal_cf[3];
avail[4, :] .= thermal_cf[4];
avail[5, :] = wind_cf;
avail[6, :] = solar_cf;

@constraint(energy_model,availability[g in G, t in T], y[g,t] <= avail[g,t]*x[g])

@constraint(energy_model,load[t in T], sum(y[:, t]) == demand[t])
```

## Problem 1.4
```julia
optimize!(energy_model)
```

## Problem 1.5
```julia
build = value.(x);
cost = objective_value(energy_model);
nonserve = sum(value.(z));
```

The ultility needs to build generators to provide for the following amounts in MW. 
The values correspond to geothermal, coal , CCGT, CT, wind, and solar respectively.
```julia
print(build)
```

The total cost in dollars will be
```julia
print(cost)
```

The nonserved energy in MW will be
```julia
print(nonserve)
```

## Problem 1.6
```julia
using Plots

g = value.(y).data

L = plot(g', label=permutedims(generators), xlabel = "Time of day (hr)", ylabel ="Generated Electricity (MW)", title = "Raw Amounts of Generated Electricity")

A = areaplot(g', label=permutedims(generators), xlabel = "Time of day (hr)", ylabel ="Generated Electricity (MW)", title = "Aggregated Amounts of Generated Electricity");

D = plot!(demand, color=:red, label="demand", linewidth = 5)
```


# Problem 2

## Problem 2.1
```julia

```

## Problem 2.2
```julia

```

## Problem 2.3
```julia

```

## Problem 2.4
```julia

```

## Problem 2.5


# References
Lecture notes 9, 11, and 12 from https://viveks.me/environmental-systems-analysis/schedule/

https://tex.stackexchange.com/questions/46189/how-do-i-add-a-line-break-in-display-math-mode

https://docs.juliaplots.org/latest/attributes/


